#!/usr/bin/env bash
file="$2"
out="$3"
install="$4"
crate_api="https://crates.io/api/v1/crates"
build_root="${BUILD_ROOT:-$HOME/rpmbuild/SOURCES/}"

#tput colors
yellow=$(tput setaf 3)
green=$(tput setaf 2)
red=$(tput setaf 1)
normal=$(tput sgr0)

missing_packages() {
  rpmbuild -ba "$file" 2>&1|grep 'is needed by' > crateparse-"$file"
  printf "%s\n" "${green}OK${normal}: Created the file ${yellow}crateparse-$file${normal}"
}

get_crate() {
  name="$2"
  version="$3"
  curl -L "$crate_api"/"$name"/"$version"/download -o "$build_root$name-$version.crate"
}

crate_parse() {
  while IFS= read -r line; do
    line=$(echo "$line"|\
        awk -F'is needed by' '{print $1}'|\
        awk '{$1=$1;print}'|\
        sed -E 's/[()~]//g; 
            s/^crate/rust-/g; 
            s/ with crate/, rust-/g;
            s,/,+,g;'|\
        sed "s/+\([^+, ]*\)/+\1$out/g"
      )
    echo "$line"
  done < "$file"
}

search_dep() {
  tf="$(mktemp)"
  crate_parse > "$tf"
  printf "%-40s %-10s %-10s %-15s %-10s\n" "Package Name" "Min Ver" "Max Ver" "Available Ver" "Installable"
  while read -r line; do
    pkg=$(echo "$line"|awk '{print $1}')
    minver=$(echo "$line"|awk '{print $3}'|sed 's/,//g')
    maxver=$(echo "$line"|awk '{print $6}'|sed 's/,//g')
    avaver=$(search_ver)
    sup=$(check_ver "$avaver" "$minver" "$maxver" "$pkg")
    printf "%-40s %-10s %-10s %-15s %-10s\n" "$pkg" "$minver" "$maxver" "$avaver" "$sup"
  done < "$tf"
  rm -f "$tf"
}

create_build_requires(){
  brf="$(mktemp)"
  crate_parse > "$brf"
  sed -i 's/^/BuildRequires:  /' "$brf"
  cat "$brf"
  rm -f "$brf"
}

check_ver(){
  local sup
  if [[ ("$avaver" > "$minver" || "$avaver" == "$minver" ) && "$avaver" < "$maxver" ]];then
    sup="${green}OK${normal}"
    install_dep "$pkg"
  elif [[ ( -z "$minver" || -z "$maxver" ) && ( -n "$avaver" ) ]];then
    sup="${green}OK${normal}"
    install_dep "$pkg"
  else
    sup="${red}NOT${normal}"
  fi
  printf "%s" "$sup"
}

search_ver(){
  local getver
  for i in $pkg;do
    getver=$(dnf info "$i" 2>&1 /dev/null |\
      grep 'Version'|\
      awk -F':' '{print $2}'|\
      awk '{$1=$1;print}')
    if [ -z "$getver" ]; then
      getver="Missing Package"
      break
		fi
  done
  printf "%s" "$getver"
}

install_dep() {
  if [ -n "$install" ];then 
    sudo dnf -y install "$pkg" > /dev/null 2>&1
  fi
}

show_missing_declared(){
  rpmbuild -ba "$file" 2>&1|grep "$out"|awk '{$1=$1;print}'|awk '{print $1}'|uniq
}

cmd() {
  case "$1" in
    init)
      missing_packages
  	;;
  	search)
  		search_dep
  	;;
    requires)
      create_build_requires
    ;;
    declared)
      show_missing_declared
    ;;
    parse)
      crate_parse
    ;;
    getcrate)
      get_crate "$@"
    ;;
  	*)
      printf "Usage:\n"
      printf "%-55s %-80s\n" "${green}$0 ${yellow}init ${red}specfile${normal}" "# generate the inital dependencies file"
      printf "%-55s %-80s\n" "${green}$0 ${yellow}search ${red}parsedep${normal}" "# use the generated parse file to search for dependencies"
  		printf "%-55s %-80s\n" "${green}$0 ${yellow}search ${red}parsedep -devel${normal}" "# append the word -devel in the search"
  		printf "%-55s %-80s\n" "${green}$0 ${yellow}search ${red}parsedep -devel -i${normal}" "# append the word -devel in the search and install the missing packages"
  		printf "%-55s %-80s\n" "${green}$0 ${yellow}declared ${red}specfile pattern${normal}" "# list the unique declared missing BuildRequires"
  esac
}

main() {
  cmd "$@"
}

main "$@"
